import java.util.Scanner;

public class Knapsack {
    public static int knapsack(int[] weights, int[] values, int capacity) {
        int n = weights.length;
        int[][] dp = new int[n + 1][capacity + 1];

        for (int i = 1; i <= n; i++) {
            for (int w = 1; w <= capacity; w++) {
                if (weights[i - 1] <= w) {
                    dp[i][w] = Math.max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]]);
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }
        return dp[n][capacity];
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of items: ");
        int n = scanner.nextInt();
        
        int[] weights = new int[n];
        int[] values = new int[n];
        
        System.out.println("Enter the weights of the items:");
        for (int i = 0; i < n; i++) {
            weights[i] = scanner.nextInt();
        }
        
        System.out.println("Enter the values of the items:");
        for (int i = 0; i < n; i++) {
            values[i] = scanner.nextInt();
        }
        
        System.out.print("Enter the capacity of the knapsack: ");
        int capacity = scanner.nextInt();

        int maxVal = knapsack(weights, values, capacity);
        System.out.println("Maximum value that can be obtained: " + maxVal);
        
        scanner.close();
    }
}

______________________________

import java.util.Scanner;

public class TSP {
    public static int tsp(int[][] graph, int src, boolean[] visited, int n, int count, int cost, int ans) {
        if (count == n && graph[src][0] > 0) {
            ans = Math.min(ans, cost + graph[src][0]);
            return ans;
        }

        for (int v = 0; v < n; v++) {
            if (!visited[v] && graph[src][v] > 0) {
                visited[v] = true;
                ans = tsp(graph, v, visited, n, count + 1, cost + graph[src][v], ans);
                visited[v] = false;
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of cities: ");
        int n = scanner.nextInt();

        int[][] graph = new int[n][n];
        
        System.out.println("Enter the adjacency matrix representing the distances between cities:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                graph[i][j] = scanner.nextInt();
            }
        }

        boolean[] visited = new boolean[n];
        visited[0] = true;
        
        int ans = Integer.MAX_VALUE;
        ans = tsp(graph, 0, visited, n, 1, 0, ans);
        System.out.println("Minimum cost for TSP: " + ans);
        
        scanner.close();
    }
}

____________________________________________________________________

import java.util.Scanner;

public class NQueens {
    private static int N;

    private static boolean isSafe(int[][] board, int row, int col) {
        int i, j;
        
        // Check this row on the left side
        for (i = 0; i < col; i++)
            if (board[row][i] == 1)
                return false;

        // Check upper diagonal on left side
        for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 1)
                return false;

        // Check lower diagonal on left side
        for (i = row, j = col; j >= 0 && i < N; i++, j--)
            if (board[i][j] == 1)
                return false;

        return true;
    }

    private static boolean solveNQueensUtil(int[][] board, int col) {
        if (col >= N)
            return true;

        for (int i = 0; i < N; i++) {
            if (isSafe(board, i, col)) {
                board[i][col] = 1;

                if (solveNQueensUtil(board, col + 1))
                    return true;

                board[i][col] = 0; // Backtrack
            }
        }

        return false;
    }

    public static void solveNQueens(int n) {
        N = n;
        int[][] board = new int[N][N];
        if (!solveNQueensUtil(board, 0))
            System.out.println("Solution does not exist");
        else {
            System.out.println("Solution exists:");
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    System.out.print(board[i][j] + " ");
                }
                System.out.println();
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the size of the chessboard (N): ");
        int n = scanner.nextInt();
        solveNQueens(n);
        scanner.close();
    }
}
